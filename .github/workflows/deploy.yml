name: Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - README.md
      - CONTRIBUTING.md
      - LICENSE
  pull_request:
    branches:
      - main
  workflow_dispatch: # This is a manual trigger in case of emergency

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/**/*.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run all linters
        run: npm run lint:all

      - name: Run URL checker
        env:
          URL_CHECKER_TIMEOUT: 30 # Timeout value
        run: |
          node script/url-checker.js -t ${{ env.URL_CHECKER_TIMEOUT }} -d src/posts

      - name: Run scripts
        run: |
          for script in script/**; do
            if [[ -x "$script" ]]; then
              "$script"
            fi
          done

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Extract repository name
        id: extract_repo
        run: |
          REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2-)
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/**/*.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Build static pages
        env:
          PATH_PREFIX: /${{ env.REPO_NAME }}/
        run: npm run eleventy:prod
    
      - name: Upload built site
        uses: actions/upload-artifact@v3
        with:
          name: site
          path: _site/

      - name: List contents of _site directory
        run: ls -la _site/
 

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download built site
        uses: actions/download-artifact@v3
        with:
          name: site

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _site/

      - name: Verify _site directory contents
        run: ls -la _site/

      - name: Create deployment status issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS="succeeded"
          if [ $? -ne 0 ]; then STATUS="failed"; fi
          DATE=$(date +'%Y-%m-%d')
          URL=$(gh api "repos/$GITHUB_REPOSITORY/pages" --jq '.html_url')
          gh issue create \
            --title "${DATE} - Deployment: ${STATUS}" \
            --body "URL: ${URL}" \
            --label "deployment"